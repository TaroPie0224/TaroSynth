新建Audio Plugin模版
添加SynthVoice.cpp SynthVoice.h
添加SynthSound.h
在两个.h文件中添加#include <JuceHeader.h>
在SynthSound.h中按照document书写class
在SynthVoice.h中#include "SynthSound.h"
在SynthVoice.h中按照document书写class
复制所有SynthVoice.h中的函数到SynthVoice.cpp并添加SynthVoice namespace
编译尝试是否成功
在PluginProcessor.h中引入SynthSund.h和SynthVoice.h
SynthVoice.cpp中的canPlaySound
PluginProcessor.h中private添加juce::Synthesiser synth;
PluginProcessor.cpp构造函数中添加synth.addSound (new SynthSound()); synth.addVoice (new SynthVoice());
prepareToPlay中增加synth.setCurrentPlaybackSampleRate (sampleRate);
processBlock中去掉第二个for
增加synth.renderNextBlock(buffer, midiMessages, 0, buffer.getNumSamples());
for
至此完成如何用juce创建一个基础的synthesiser
--------------------------------------------------------------------------------
SynthVoice.h private中osc和gain
增加prepareToPlay
isPrepared
renderNextBlock
PluginProcessor.cpp中的prepareToPlay
SynthVoice.h private ADSR
SynthVoice.cpp preparetoplay adsr.setSampleRate (sampleRate);
SynthVoice.cpp renderNextBlock adsr.applyEnvelopeToBuffer(outputBuffer, startSample, numSamples);
SynthVoice.cpp startNote/stopNote noteOn noteOff
删掉prepareToPlay中的setFrequence 220hz，在startNote中添加
至此可以尝试编译并调试插件
--------------------------------------------------------------------------------
创建接下来要用的Parameter
PluginProcessor.h中private中juce::AudioProcessorValueTreeState::ParameterLayout createParams();
PluginProcessor.cpp中juce::AudioProcessorValueTreeState::ParameterLayout TaroSynthAudioProcessor::createParams()
建立attachment
PluginEditor.h中private部分
cv至PluginEditor.cpp
PluginProcessor.h中public末尾添加juce::AudioProcessorValueTreeState apvts;
PluginProcessor.cpp构造函数末尾apvts
--------------------------------------------------------------------------------
Cleaning Up the Oscillator Voice
SynthVoice.h中private中juce::AudioBuffer<float> synthBuffer;
SynthVoice.cpp中synthBuffer.setSize (outputBuffer.getNumChannels(), numSamples, false, false, true);
synthBuffer.clear();
修改成juce::dsp::AudioBlock<float> audioBlock { synthBuffer };
SynthVoice.cpp中renderNextBlock中for (int channel = 0; channel < outputBuffer.getNumChannels(); ++channel)
SynthVoice.cpp中renderNextBlock中修改adsr.applyEnvelopeToBuffer(outputBuffer, 0, synthBuffer.getNumSamples());
SynthVoice.cpp中stopNote中if (! allowTailOff || ! adsr.isActive())
SynthVoice.cpp中prepareToPlay中Params.attack = 0.8f;....adsr.setParameters (adsrParams);
编译trytry
--------------------------------------------------------------------------------
Creating ADSR Sliders
SynthVoice.h中void updateADSR (const float attack, const float decay, const float sustain, const float release);
SynthVoice.cpp中对应void SynthVoice::updateADSR
PluginProcessor.cpp中修改if (auto voice = dynamic_cast<SynthVoice*>(synth.getVoice(i)))   line:153
PluginProcessor.cpp中auto& attack = *apvts.getRawParameterValue ("ATTACK");......voice->updateADSR(attack.load(), decay.load(), sustain.load(), release.load());
PluginEditor.h中private新建void setSliderParams (juce::Slider& slider)
PluginEditor.cpp中新建void TaroSynthAudioProcessorEditor::setSliderParams (juce::Slider& slider)
函数内容slider.setSliderStyle(juce::Slider::SliderStyle::LinearVertical); attackSlider.setTextBoxStyle(juce::Slider::TextBoxBelow, true, 50, 25); addAndMakeVisible(attackSlider);
PluginEditor.cpp构造函数中setSliderParams (attackSlider);······
PluginEditor.cpp中resized()内容，页面布局
PluginEditor.cpp中paint()，g.fillAll (juce::Colours::black);
--------------------------------------------------------------------------------
7.21
把PluginEditor.h中的Slider剪切到AdsrComponent.h中的private中
PluginEditor.h中加上#include "UI/AdsrComponent.h
PluginEditor.h中private加上AdsrComponent adsr; 记得放在audioProcessor之后
PluginEditor.cpp中的using SliderAttachment = juce::AudioProcessorValueTreeState::SliderAttachment; attackAttachment = std::make_unique<SliderAttachment>(audioProcessor.apvts, "ATTACK", attackSlider);······加到AdsrComponent.cpp中
PluginEditor.cpp中的setSliderParams (attackSlider);······移到AdsrComponent.cpp中
PluginEditor.cpp中的void TaroSynthAudioProcessorEditor::setSliderParams (juce::Slider& slider)移到AdsrComponent.cpp中并改名AdsrComponent
PluginEditor.h中private加上void setSliderParams (juce::Slider& slider)；
PluginEditor.cpp中的resize移到AdsrComponent.cpp中
AdsrComponent.cpp中paint修改为g.fillAll(juce::Colours::black);
把PluginEditor.h中using SliderAttachment = juce::AudioProcessorValueTreeState::SliderAttachment; std::unique_ptr<SliderAttachment> attackAttachment;剪切到AdsrComponent.h中的private中
删除PluginEditor.h中private中void setSliderParams (juce::Slider& slider);
AdsrComponent.h中构造函数添加AdsrComponent(juce::AudioProcessorValueTreeState& apvts);cpp中同理
PluginEditor.cpp中构造函数：后面添加adsr (audioProcessor.apvts)
AdsrComponent.h中public添加void setSliderParams (juce::Slider& slider);
PluginEditor.cpp中构造函数添加addAndMakeVisible (adsr);
PluginEditor.cpp中rized中添加adsr.setBounds (getLocalBounds());
AdsrComponent.cpp中resized修改const auto sliderHeight = bounds.getHeight(); const auto sliderStartY = 0;

AdsrData.h引入#include <JuceHeader.h>
SynthVoice.h引入#include "Data/AdsrData.h"
SynthVoice.h中private中juce::ADSR adsr; juce::ADSR::Parameters adsrParams;移动到AdsrData.h中并删掉juce::ADSR adsr
SynthVoice.cpp中updateADSR移动到Adsr.cpp中
SynthVoice.h中private中添加AdsrData adsr;
SynthVoice.cpp中SynthVoice::updateADSR添加adsr.update(attack, decay, sustain, release);
SynthVoice.h SynthVoice.cpp PluginProcessor.cpp中所有updataADSR改为update
--------------------------------------------------------------------------------
7.31
processBlock内容
删editor.h中private前两行
删editor.cpp中构造中attachment
editor.h中添加OscComponent osc;
editor.cpp中initializeList中添加osc (audioProcessor.apvts，"OSC1WAVETYPE")
OscComponent.h中构造形参添加OscComponent(juce::AudioProcessorValueTreeState& apvts, juce::String waveSelectorId)
cpp同理
OscComponent.h和cpp中剩下部分
editor.cpp中addAndMakeVisible (osc);
editor.cpp中osc.setBounds (10, 10, 100, 30);
OscData.h中void prepareToPlay (juce::dsp::ProcessSpec& spec);
cpp同理
SynthVoice.cpp中osc.prepare ( spec );删掉，添加osc.prepareToPlay (spec);
SynthVoice.cpp中删掉renderNextBlock中osc.process (juce::dsp::ProcessContextReplacing<float> (audioBlock));
OscData.cpp中添加void OscData::getNextAudioBlock (juce::dsp::AudioBlock<float>& block)
.h同理
SynthVoice.cpp中renderNextBlock中添加osc.getNextAudioBlock (audioBlock);
    void setWaveFrequency (const int midiNoteNumber);
OscData.h中添加void setWaveFrequency (const int midiNoteNumber);
cpp同理
SynthVoice.cpp中startNote中将osc.setFrequency改为osc.setWaveFrequency (midiNoteNumber);
